#!/usr/bin/env sh

# Setup utility
# by David Oniani <onianidavid@gmail.com>
# MIT License

config() {
    cp -R .config "$HOME"
    cp -R .local "$HOME"

    mkdir -p "$HOME/.local/share/email/gmail"
    mkdir -p "$HOME/dl" "$HOME/doc" "$HOME/git" "$HOME/pic" "$HOME/vid" "$HOME/wip"
    mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/msmtp"
    mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/zsh"

    sudo touch "/etc/zsh/zshenv"
    printf "export ZDOTDIR=%s/.config/zsh\n" "$HOME" | sudo tee "/etc/zsh/zshenv"

    dir="${XDG_CONFIG_HOME:-$HOME/.config}/zsh/plugin"
    git clone --depth=1 --quiet https://github.com/romkatv/powerlevel10k.git \
        "$dir/powerlevel10k" >/dev/null 2>&1 || exit 0
    git clone --depth=1 --quiet https://github.com/zsh-users/zsh-autosuggestions.git \
        "$dir/zsh-autosuggestions" >/dev/null 2>&1 || exit 0
    git clone --depth=1 --quiet https://github.com/zsh-users/zsh-syntax-highlighting.git \
        "$dir/zsh-syntax-highlighting" >/dev/null 2>&1 || exit 0
}

emailsync() {
    pass=$(secret-tool lookup gmail pass)
    [ -n "$pass" ] || (printf "Input email pass\n" && secret-tool store --label="pass" gmail pass)
    fcron="$(mktemp)"
    fcrontab -l > "$fcron"
    if grep -q emailsync "$fcron"; then
        printf "Removing automatic emailsync...\n"
        sed -ibu /emailsync/d "$fcron"
        rm -f "$fcron"bu
    else
        printf "Adding automatic emailsync every 2 minutes...\n"
        printf "*/2 * * * * %s\n" "$HOME/.local/bin/emailsync" >> "$fcron"
    fi && fcrontab "$fcron"
    rm -f "$fcron"
}

nosudo() {
    sudo touch "/etc/sudoers.d/$USER"
    printf "%s ALL=(ALL:ALL) NOPASSWD: ALL\n" "$USER" | sudo tee "/etc/sudoers.d/$USER"

    sudo touch /etc/sudoers.d/disable_admin_file_in_home
    printf "Defaults !admin_flag\n" | sudo tee /etc/sudoers.d/disable_admin_file_in_home
}

program() {
    sed 1d programs.csv | while IFS=, read -r tag name description; do
        printf "Installing %s (%s)\n" "$name" "$description"
        case $tag in
            PACMAN) sudo pacman -S  --noconfirm "$name";;
            AUR) paru -S --noconfirm "$name";;
            *) printf "%s\n" "Wrong tag!" >&2 && exit 1;;
        esac
    done
}

help() {
    printf "usage: ./setup [option]\n\
    --config     Copy configuration files\n\
    --nosudo     Configure sudo behavior\n\
    --emailsync  Activates email synchronization\n\
    --program    Install all necessary programs\n"
}

case $1 in
    "--config") config;;
    "--emailsync") emailsync;;
    "--nosudo") nosudo;;
    "--program") program;;
    *) help;;
esac
